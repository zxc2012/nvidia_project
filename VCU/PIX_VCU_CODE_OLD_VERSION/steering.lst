C166 COMPILER V7.00, STEERING                                                              04/01/2020 13:45:21 PAGE 1   


C166 COMPILER V7.00, COMPILATION OF MODULE STEERING
OBJECT MODULE PLACED IN steering.obj
COMPILER INVOKED BY: H:\KEILC166\C166\BIN\C166.EXE source\steering.c MODV2 BROWSE INCDIR(.\source;.\lib) MODV2 DEBUG PRI
                    -NT(.\steering.lst) OBJECT(steering.obj) 

 stmt lvl     source

    1         /************************************************************
    2         function:Steering system control, including 
    3                                 steering mode specific values, etc.
    4         date:2019.09.20
    5         author:dowson_tseng
    6         email:dowson.tseng@gmail.com
    7         *************************************************************/
    8         
    9         #include "MAIN.h"
   10         #include "steering.h"
   11         #include "vehicle_control.h"
   12         #include "remote.h"
   13         
   14         extern struct remote_receive remote_re;
   15         
   16         //制作转向数据，这里注意电机转向行程是-750 to 750  但是转向机只有-136 to 136   ，发送值应该位 750±136
   17         void send_steering(int steering_size,char steering_mod,char enable)
   18         {
   19  1              int i=0;
   20  1              ubyte DataF[8],DataB[8];
   21  1              for(i=0;i<=7;i++){
   22  2                      DataF[i]=0; //clear
   23  2                      DataB[i]=0;
   24  2              }
   25  1              //对转向数据进行换算
   26  1              //转向行程软保护
   27  1              if(steering_size>100)
   28  1                      steering_size=100;
   29  1              else if (steering_size<-100)
   30  1                      steering_size=-100;
   31  1              //大于一定值开启转向灯
   32  1              if(steering_size>20)
   33  1                      P1_OUT_P0 = 0;
   34  1              else if(steering_size<-20)
   35  1                      P7_OUT_P3 = 0;
   36  1              else {
   37  2                      P7_OUT_P3 = 1;
   38  2                      P1_OUT_P0 = 1;
   39  2              }
   40  1              //判断是哪种转向模式,默认普通模式
   41  1      
   42  1              switch(steering_mod){
   43  2                      case 1:  //异向模式
   44  2                              DataF[0] = (steering_size+750)&0xff;
*** WARNING C192 IN LINE 44 OF SOURCE\STEERING.C: '=': value truncated
   45  2                              DataF[1] = (steering_size+750)>>8;
*** WARNING C192 IN LINE 45 OF SOURCE\STEERING.C: '=': value truncated
   46  2                              DataF[2] = enable;       //enable bit
   47  2                              DataF[3] = 0x00;
   48  2                              DataF[4] =  0x00;        
   49  2                              DataF[5] = 0x00;
   50  2                              DataF[6] = 0x00;
   51  2                              DataF[7] =0x00; 
   52  2      
C166 COMPILER V7.00, STEERING                                                              04/01/2020 13:45:21 PAGE 2   

   53  2                              DataB[0] = ((~steering_size+1)+750)&0xff;
*** WARNING C192 IN LINE 53 OF SOURCE\STEERING.C: '=': value truncated
   54  2                              DataB[1] = ((~steering_size+1)+750)>>8;
*** WARNING C192 IN LINE 54 OF SOURCE\STEERING.C: '=': value truncated
   55  2                              DataB[2] = enable;      //enable bit
   56  2                              DataB[3] = 0x00;
   57  2                              DataB[4] =  0x00;        
   58  2                              DataB[5] = 0x00;
   59  2                              DataB[6] = 0x00;
   60  2                              DataB[7] =0x00; 
   61  2                      break;          
   62  2                      case 2:  //正常模式
   63  2                              DataF[0] = (steering_size+750)&0xff;
*** WARNING C192 IN LINE 63 OF SOURCE\STEERING.C: '=': value truncated
   64  2                              DataF[1] = (steering_size+750)>>8;
*** WARNING C192 IN LINE 64 OF SOURCE\STEERING.C: '=': value truncated
   65  2                              DataF[2] = enable;      //enable bit
   66  2                              DataF[3] = 0x00;
   67  2                              DataF[4] =  0x00;        
   68  2                              DataF[5] = 0x00;
   69  2                              DataF[6] = 0x00;
   70  2                              DataF[7] =0x00;
   71  2      
   72  2                              DataB[0] = 750&0xff;
   73  2                              DataB[1] =  750>>8;
   74  2                              DataB[2] = enable;   //enable bit
   75  2                              DataB[3] = 0x00;
   76  2                              DataB[4] =  0x00;        
   77  2                              DataB[5] = 0x00;
   78  2                              DataB[6] = 0x00;
   79  2                              DataB[7] =0x00; 
   80  2                              break;
   81  2                      case 3:  //同向模式
   82  2                              DataF[0] = (steering_size+750)&0xff;
*** WARNING C192 IN LINE 82 OF SOURCE\STEERING.C: '=': value truncated
   83  2                              DataF[1] = (steering_size+750)>>8;
*** WARNING C192 IN LINE 83 OF SOURCE\STEERING.C: '=': value truncated
   84  2                              DataF[2] = enable;       //enable bit
   85  2                              DataF[3] = 0x00;
   86  2                              DataF[4] =  0x00;        
   87  2                              DataF[5] = 0x00;
   88  2                              DataF[6] = 0x00;
   89  2                              DataF[7] =0x00;
   90  2      
   91  2                              DataB[0] = (steering_size+750)&0xff;
*** WARNING C192 IN LINE 91 OF SOURCE\STEERING.C: '=': value truncated
   92  2                              DataB[1] = (steering_size+750)>>8;
*** WARNING C192 IN LINE 92 OF SOURCE\STEERING.C: '=': value truncated
   93  2                              DataB[2] = enable; //enable bit
   94  2                              DataB[3] = 0x00;
   95  2                              DataB[4] =  0x00;        
   96  2                              DataB[5] = 0x00;
   97  2                              DataB[6] = 0x00;
   98  2                              DataB[7] =0x00; 
   99  2                              break;
  100  2              }
  101  1              CAN_vLoadData(FSC_410,DataF);    //310-340  8-11   
  102  1              CAN_vTransmit(FSC_410); 
  103  1              delay(500);
  104  1              CAN_vLoadData(BSC_420,DataB);    //310-340  8-11    
  105  1              CAN_vTransmit(BSC_420);
  106  1              delay(500);
C166 COMPILER V7.00, STEERING                                                              04/01/2020 13:45:21 PAGE 3   

  107  1      }
  108         
  109         
  110         
  111         
  112         
  113         
  114         
  115         
  116         
  117         
  118         
  119         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         446     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  10 WARNING(S),  0 ERROR(S)
