C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 1   


C166 COMPILER V7.00, COMPILATION OF MODULE ADC1
OBJECT MODULE PLACED IN ADC1.obj
COMPILER INVOKED BY: H:\KEILC166\C166\BIN\C166.EXE source\ADC1.c MODV2 BROWSE INCDIR(.\source;.\lib) MODV2 DEBUG PRINT(.
                    -\ADC1.lst) OBJECT(ADC1.obj) 

 stmt lvl     source

    1         //****************************************************************************
    2         // @Module        Analog / Digital Converter (ADC1)
    3         // @Filename      ADC1.c
    4         // @Project       tiaoshi.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon XC2267M-104F80
    7         //
    8         // @Compiler      Keil
    9         //
   10         // @Codegenerator 2.0
   11         //
   12         // @Description   This file contains functions that use the ADC1 module.
   13         //
   14         //----------------------------------------------------------------------------
   15         // @Date          2020/1/14 16:27:48
   16         //
   17         //****************************************************************************
   18         
   19         // USER CODE BEGIN (ADC1_General,1)
   20         
   21         // USER CODE END
   22         
   23         
   24         
   25         //****************************************************************************
   26         // @Project Includes
   27         //****************************************************************************
   28         
   29         #include "MAIN.h"
   30         
   31         // USER CODE BEGIN (ADC1_General,2)
   32         
   33         // USER CODE END
   34         
   35         
   36         //****************************************************************************
   37         // @Macros
   38         //****************************************************************************
   39         
   40         // USER CODE BEGIN (ADC1_General,3)
   41         
   42         // USER CODE END
   43         
   44         
   45         //****************************************************************************
   46         // @Defines
   47         //****************************************************************************
   48         
   49         // USER CODE BEGIN (ADC1_General,4)
   50         
   51         // USER CODE END
   52         
   53         
   54         //****************************************************************************
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 2   

   55         // @Typedefs
   56         //****************************************************************************
   57         
   58         // USER CODE BEGIN (ADC1_General,5)
   59         
   60         // USER CODE END
   61         
   62         
   63         //****************************************************************************
   64         // @Imported Global Variables
   65         //****************************************************************************
   66         
   67         // USER CODE BEGIN (ADC1_General,6)
   68         
   69         // USER CODE END
   70         
   71         
   72         //****************************************************************************
   73         // @Global Variables
   74         //****************************************************************************
   75         
   76         // USER CODE BEGIN (ADC1_General,7)
   77         
   78         // USER CODE END
   79         
   80         
   81         //****************************************************************************
   82         // @External Prototypes
   83         //****************************************************************************
   84         
   85         // USER CODE BEGIN (ADC1_General,8)
   86         
   87         // USER CODE END
   88         
   89         
   90         //****************************************************************************
   91         // @Prototypes Of Local Functions
   92         //****************************************************************************
   93         
   94         // USER CODE BEGIN (ADC1_General,9)
   95         
   96         // USER CODE END
   97         
   98         
   99         //****************************************************************************
  100         // @Function      void ADC1_vInit(void) 
  101         //
  102         //----------------------------------------------------------------------------
  103         // @Description   This is the initialization function of the ADC function 
  104         //                library. It is assumed that the SFRs used by this library 
  105         //                are in reset state. 
  106         //                
  107         //                Following SFR fields will be initialized:
  108         //                GLOBCTR  - Global Control
  109         //                RSPR0    - Priority and Arbitration Register
  110         //                ASENR    - Arbitration slot enable register
  111         //                CHCTRx   - Channel Control Register x
  112         //                RCRx     - Result Control Register x
  113         //                KSCFG    - Module configuration Register
  114         //                INPCR    - Input class Registers
  115         //                CHINPRx  - Channel Interrupt register
  116         //                EVINPRx  - Event Interrupt register
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 3   

  117         //                SYNCTR   - Synchronisation control register
  118         //                LCBRx    - Limit check boundary register
  119         //                PISEL    - Port input selection
  120         //                QMR0     - Sequential 0 mode register
  121         //                CRMR1    - Parallel mode register
  122         //                QMR2     - Sequential 2 mode register
  123         //
  124         //----------------------------------------------------------------------------
  125         // @Returnvalue   None
  126         //
  127         //----------------------------------------------------------------------------
  128         // @Parameters    None
  129         //
  130         //----------------------------------------------------------------------------
  131         // @Date          2020/1/14
  132         //
  133         //****************************************************************************
  134         
  135         // USER CODE BEGIN (ADC1_Init,1)
  136         
  137         // USER CODE END
  138         
  139         void ADC1_vInit(void)
  140         {
  141  1        // USER CODE BEGIN (ADC1_Init,2)
  142  1      
  143  1        // USER CODE END
  144  1      
  145  1        ///  -----------------------------------------------------------------------
  146  1        ///  Configuration of ADC0 kernel configuration register:
  147  1        ///  -----------------------------------------------------------------------
  148  1        ADC0_KSCFG     =  0x0003;      // load ADC0 kernel configuration register
  149  1      
  150  1        ///  - the ADC module clock is enabled
  151  1        ///  - the ADC module clock = 80.00 MHz
  152  1        ///   
  153  1      
  154  1        _nop_();  // one cycle delay 
  155  1      
  156  1        _nop_();  // one cycle delay 
  157  1      
  158  1        ///  -----------------------------------------------------------------------
  159  1        ///  Configure global control register:
  160  1        ///  -----------------------------------------------------------------------
  161  1        ///  --- Conversion Timing -----------------
  162  1        ///  - conversion time (CTC)    = 02.13 us
  163  1      
  164  1        ///  _Analog clock is 1/10th of module clock and digital clock is 1/2 times 
  165  1        ///  of module clock
  166  1      
  167  1        ///  - the permanent arbitration mode is selected
  168  1        ADC1_GLOBCTR   =  0x0049;      // load global control register
  169  1      
  170  1        ///  -----------------------------------------------------------------------
  171  1        ///  Configuration of Arbitration Slot enable register and also the Source 
  172  1        ///  Priority register:
  173  1        ///  -----------------------------------------------------------------------
  174  1        ///  - Arbitration Slot 0 is enabled
  175  1      
  176  1        ///  - Arbitration Slot 1 is disabled
  177  1      
  178  1        ///  - Arbitration Slot 2 is disabled
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 4   

  179  1      
  180  1        ///  - the priority of request source 0 is low
  181  1        ///  - the wait-for-start mode is selected for source 0
  182  1        ///  - the priority of request source 1 is low
  183  1        ///  - the wait-for-start mode is selected for source 1
  184  1        ///  - the priority of request source 2 is low
  185  1        ///  - the wait-for-start mode is selected for source 2
  186  1        ADC1_ASENR     =  0x0001;      // load Arbitration Slot enable register
  187  1      
  188  1        ADC1_RSPR0     =  0x0000;      // load Priority and Arbitration register
  189  1      
  190  1        ///  -----------------------------------------------------------------------
  191  1        ///  Configuration of Channel Control Registers:
  192  1        ///  -----------------------------------------------------------------------
  193  1        ///  Configuration of Channel 0
  194  1        ///  - the result register0 is selected
  195  1        ///  - the limit check 0 is selected
  196  1      
  197  1        ///  - the reference voltage selected is Standard Voltage (Varef)
  198  1      
  199  1        ///  - the input class selected is Input Class 0
  200  1      
  201  1        ///  - LCBR0 is selected as upper boundary
  202  1      
  203  1        ///  - LCBR1 is selected as lower boundary
  204  1      
  205  1        ADC1_CHCTR0    =  0x0004;      // load channel control register
  206  1      
  207  1        ///  Configuration of Channel 2
  208  1        ///  - the result register2 is selected
  209  1        ///  - the limit check 0 is selected
  210  1      
  211  1        ///  - the reference voltage selected is Standard Voltage (Varef)
  212  1      
  213  1        ///  - the input class selected is Input Class 0
  214  1      
  215  1        ///  - LCBR0 is selected as upper boundary
  216  1      
  217  1        ///  - LCBR1 is selected as lower boundary
  218  1      
  219  1        ADC1_CHCTR2    =  0x2004;      // load channel control register
  220  1      
  221  1        ///  Configuration of Channel 4
  222  1        ///  - the result register4 is selected
  223  1        ///  - the limit check 0 is selected
  224  1      
  225  1        ///  - the reference voltage selected is Standard Voltage (Varef)
  226  1      
  227  1        ///  - the input class selected is Input Class 0
  228  1      
  229  1        ///  - LCBR0 is selected as upper boundary
  230  1      
  231  1        ///  - LCBR1 is selected as lower boundary
  232  1      
  233  1        ADC1_CHCTR4    =  0x4004;      // load channel control register
  234  1      
  235  1        ///  Configuration of Channel 5
  236  1        ///  - the result register5 is selected
  237  1        ///  - the limit check 0 is selected
  238  1      
  239  1        ///  - the reference voltage selected is Standard Voltage (Varef)
  240  1      
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 5   

  241  1        ///  - the input class selected is Input Class 0
  242  1      
  243  1        ///  - LCBR0 is selected as upper boundary
  244  1      
  245  1        ///  - LCBR1 is selected as lower boundary
  246  1      
  247  1        ADC1_CHCTR5    =  0x5004;      // load channel control register
  248  1      
  249  1        ///  Configuration of Channel 6
  250  1        ///  - the result register6 is selected
  251  1        ///  - the limit check 0 is selected
  252  1      
  253  1        ///  - the reference voltage selected is Standard Voltage (Varef)
  254  1      
  255  1        ///  - the input class selected is Input Class 0
  256  1      
  257  1        ///  - LCBR0 is selected as upper boundary
  258  1      
  259  1        ///  - LCBR1 is selected as lower boundary
  260  1      
  261  1        ADC1_CHCTR6    =  0x6004;      // load channel control register
  262  1      
  263  1        ///  -----------------------------------------------------------------------
  264  1        ///  Configuration of Sample Time and Resolution:
  265  1        ///  -----------------------------------------------------------------------
  266  1      
  267  1        ///  10 bit resolution selected
  268  1      
  269  1        ADC1_INPCR0    =  0x0000;      // load input class0 register
  270  1      
  271  1        ///  10 bit resolution selected
  272  1      
  273  1        ADC1_INPCR1    =  0x0000;      // load input class1 register
  274  1      
  275  1        ///  -----------------------------------------------------------------------
  276  1        ///  Configuration of Result Control Registers:
  277  1        ///  -----------------------------------------------------------------------
  278  1        ///  Configuration of Result Control Register 0
  279  1        ///  - the data reduction filter is disabled
  280  1        ///  - the event interrupt is disabled
  281  1        ///  - the wait-for-read mode is disabled
  282  1      
  283  1        ///  - the FIFO functionality is disabled
  284  1      
  285  1        ADC1_RCR0      =  0x0000;      // load result control register 0
  286  1      
  287  1        ///  Configuration of Result Control Register 1
  288  1        ///  - the data reduction filter is disabled
  289  1        ///  - the event interrupt is disabled
  290  1        ///  - the wait-for-read mode is disabled
  291  1      
  292  1        ///  - the FIFO functionality is disabled
  293  1      
  294  1        ADC1_RCR1      =  0x0000;      // load result control register 1
  295  1      
  296  1        ///  Configuration of Result Control Register 2
  297  1        ///  - the data reduction filter is disabled
  298  1        ///  - the event interrupt is disabled
  299  1        ///  - the wait-for-read mode is disabled
  300  1      
  301  1        ///  - the FIFO functionality is disabled
  302  1      
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 6   

  303  1        ADC1_RCR2      =  0x0000;      // load result control register 2
  304  1      
  305  1        ///  Configuration of Result Control Register 3
  306  1        ///  - the data reduction filter is disabled
  307  1        ///  - the event interrupt is disabled
  308  1        ///  - the wait-for-read mode is disabled
  309  1      
  310  1        ///  - the FIFO functionality is disabled
  311  1      
  312  1        ADC1_RCR3      =  0x0000;      // load result control register 3
  313  1      
  314  1        ///  Configuration of Result Control Register 4
  315  1        ///  - the data reduction filter is disabled
  316  1        ///  - the event interrupt is disabled
  317  1        ///  - the wait-for-read mode is disabled
  318  1      
  319  1        ///  - the FIFO functionality is disabled
  320  1      
  321  1        ADC1_RCR4      =  0x0000;      // load result control register 4
  322  1      
  323  1        ///  Configuration of Result Control Register 5
  324  1        ///  - the data reduction filter is disabled
  325  1        ///  - the event interrupt is disabled
  326  1        ///  - the wait-for-read mode is disabled
  327  1      
  328  1        ///  - the FIFO functionality is disabled
  329  1      
  330  1        ADC1_RCR5      =  0x0000;      // load result control register 5
  331  1      
  332  1        ///  Configuration of Result Control Register 6
  333  1        ///  - the data reduction filter is disabled
  334  1        ///  - the event interrupt is disabled
  335  1        ///  - the wait-for-read mode is disabled
  336  1      
  337  1        ///  - the FIFO functionality is disabled
  338  1      
  339  1        ADC1_RCR6      =  0x0000;      // load result control register 6
  340  1      
  341  1        ///  Configuration of Result Control Register 7
  342  1        ///  - the data reduction filter is disabled
  343  1        ///  - the event interrupt is disabled
  344  1        ///  - the wait-for-read mode is disabled
  345  1      
  346  1        ///  - the FIFO functionality is disabled
  347  1      
  348  1        ADC1_RCR7      =  0x0000;      // load result control register 7
  349  1      
  350  1        ///  -----------------------------------------------------------------------
  351  1        ///  Configuration of Channel Interrupt Node Pointer Register:
  352  1        ///  -----------------------------------------------------------------------
  353  1        ///  - the SR0 line become activated if channel 0 interrupt is generated
  354  1      
  355  1        ///  - the SR0 line become activated if channel 2 interrupt is generated
  356  1      
  357  1        ADC1_CHINPR0   =  0x0000;      // load channel interrupt node pointer 
  358  1                                       // register
  359  1      
  360  1        ///  - the SR0 line become activated if channel 4 interrupt is generated
  361  1      
  362  1        ///  - the SR0 line become activated if channel 5 interrupt is generated
  363  1      
  364  1        ///  - the SR0 line become activated if channel 6 interrupt is generated
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 7   

  365  1      
  366  1        ADC1_CHINPR4   =  0x0000;      // load channel interrupt node pointer 
  367  1                                       // register
  368  1      
  369  1        ///  -----------------------------------------------------------------------
  370  1        ///  Configuration of Event Interrupt Node Pointer Register for Source 
  371  1        ///  Interrupts:
  372  1        ///  -----------------------------------------------------------------------
  373  1        ///  - the SR 0 line become activated if the event 0 interrupt is generated
  374  1      
  375  1        ADC1_EVINPR0   =  0x0000;      // load event interrupt set flag register 
  376  1      
  377  1        ///  -----------------------------------------------------------------------
  378  1        ///  Configuration of Event Interrupt Node Pointer Register for Result 
  379  1        ///  Interrupts:
  380  1        ///  -----------------------------------------------------------------------
  381  1      
  382  1        ADC1_EVINPR8   =  0x0000;      // load event interrupt set flag register 
  383  1      
  384  1      
  385  1        ADC1_EVINPR12  =  0x0000;      // load event interrupt set flag register 
  386  1      
  387  1        ///  -----------------------------------------------------------------------
  388  1        ///  Configuration of Service Request Nodes 0 - 3 :
  389  1        ///  -----------------------------------------------------------------------
  390  1      
  391  1        ///  -----------------------------------------------------------------------
  392  1        ///  Configuration of Limit Check Boundary:
  393  1        ///  -----------------------------------------------------------------------
  394  1      
  395  1        ADC1_LCBR0     =  0x0198;      // load limit check boundary register 0
  396  1      
  397  1        ADC1_LCBR1     =  0x0E64;      // load limit check boundary register 1
  398  1      
  399  1        ADC1_LCBR2     =  0x0554;      // load limit check boundary register 2
  400  1      
  401  1        ADC1_LCBR3     =  0x0AA8;      // load limit check boundary register 3
  402  1      
  403  1        ///  -----------------------------------------------------------------------
  404  1        ///  Configuration of Gating source and External Trigger Control:
  405  1        ///  -----------------------------------------------------------------------
  406  1        ///  - No Gating source selected for Arbitration Source 0
  407  1      
  408  1        ///  - the trigger input selection is not enabled for source 0
  409  1      
  410  1        ADC1_RSIR0     =  0x0000;      // load external trigger control register 
  411  1                                       // for Request Source 0
  412  1      
  413  1        ///  - No Gating source selected for Arbitration Source 1
  414  1      
  415  1        ///  - the trigger input TRSEL selection is not enabled for Source 1
  416  1      
  417  1        ADC1_RSIR1     =  0x0000;      // load external trigger control register 
  418  1                                       // for Request Source 1
  419  1      
  420  1        ///  - No Gating source selected for Arbitration Source 2
  421  1      
  422  1        ///  - the trigger input TRSEL selection is not enabled for Source 2
  423  1      
  424  1        ADC1_RSIR2     =  0x0000;      // load external trigger control register 
  425  1                                       // for Request Source 2
  426  1      
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 8   

  427  1        ///  -----------------------------------------------------------------------
  428  1        ///  Configuration of Conversion Queue Mode Register:Sequential Source 0
  429  1        ///  -----------------------------------------------------------------------
  430  1        ///  - the gating line is permanently Enabled
  431  1        ///  - the external trigger is disabled
  432  1      
  433  1        ADC1_QMR0      =  0x0001;      // load queue mode register
  434  1      
  435  1        ///  -----------------------------------------------------------------------
  436  1        ///  Configuration of Conversion Queue Mode Register:Sequential Source 2
  437  1        ///  -----------------------------------------------------------------------
  438  1        ///  - the gating line is permanently Disabled
  439  1        ///  - the external trigger is disabled
  440  1        ///  - the trigger mode 0 is selected
  441  1      
  442  1        ADC1_QMR2      =  0x0000;      // load queue mode register
  443  1      
  444  1        ///  -----------------------------------------------------------------------
  445  1        ///  Configuration of Conversion Request Mode Registers:Parallel Source 
  446  1        ///  -----------------------------------------------------------------------
  447  1        ///  - the gating line is permanently Disabled
  448  1        ///  - the external trigger is disabled
  449  1        ///  - the source interrupt is disabled
  450  1        ///  - the autoscan functionality is disabled
  451  1      
  452  1        ADC1_CRMR1     =  0x0000;      // load conversion request mode register 1
  453  1      
  454  1        ///  -----------------------------------------------------------------------
  455  1        ///  Configuration of Synchronisation Registers:
  456  1        ///  -----------------------------------------------------------------------
  457  1        ///  - ADC1 is master 
  458  1        ADC1_SYNCTR   |=  0x0010;      // Synchronisation register
  459  1      
  460  1        P15_DIDIS      =  0x0075;      // Port 15 Digital input disable register
  461  1      
  462  1        ADC1_GLOBCTR  |=  0x0300;      // turn on Analog part
  463  1      
  464  1      
  465  1        // USER CODE BEGIN (ADC1_Init,3)
  466  1      
  467  1        // USER CODE END
  468  1      
  469  1      } //  End of function ADC1_vInit
  470         
  471         
  472         //****************************************************************************
  473         // @Function      void ADC1_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte 
  474         //                ubEnIntr, ubyte ubRFill, ubyte ubChannelNum) 
  475         //
  476         //----------------------------------------------------------------------------
  477         // @Description   This function starts the conversion of the requested 
  478         //                channel.
  479         //                NOTE -
  480         //                Before passing ubEnIntr argument as 1,make sure that Seq 0 
  481         //                source interrupt is enabled.
  482         //                External Trigger -> 0,Indicates software trigger 
  483         //                (Conversion starts once this function is executed)
  484         //
  485         //----------------------------------------------------------------------------
  486         // @Returnvalue   None
  487         //
  488         //----------------------------------------------------------------------------
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 9   

  489         // @Parameters    ubExtTrg: 
  490         //                External Trigger : defines external trigger.
  491         // @Parameters    ubEnIntr: 
  492         //                Enable Source Interrupt : defines source interrupt
  493         // @Parameters    ubRFill: 
  494         //                Refill : defines the refill
  495         // @Parameters    ubChannelNum: 
  496         //                Channel number : Name of the Request Channel Number (0 - 
  497         //                7)- see macros defined in the header file
  498         //
  499         //----------------------------------------------------------------------------
  500         // @Date          2020/1/14
  501         //
  502         //****************************************************************************
  503         
  504         void ADC1_vStartSeq0ReqChNum(ubyte ubExtTrg, ubyte ubEnIntr, ubyte ubRFill, ubyte ubChannelNum)
  505         {
  506  1      
  507  1          uword uwVal = 0;
  508  1          if (ubExtTrg == 1)
  509  1          {
  510  2              uwVal = 0x0080;
  511  2          }
  512  1          if (ubEnIntr == 1)
  513  1          {
  514  2              uwVal = uwVal + 0x0040;
  515  2          }
  516  1          if (ubRFill == 1)
  517  1          {
  518  2              uwVal = uwVal + 0x0020;
  519  2          }
  520  1          uwVal = uwVal + (ubChannelNum & 0x001f);
  521  1      
  522  1         ADC1_QINR0 = uwVal; // requested channel 
  523  1      
  524  1      } //  End of function ADC1_vStartSeq0ReqChNum
  525         
  526         
  527         
  528         
  529         // USER CODE BEGIN (ADC1_General,10)
  530         
  531         // USER CODE END
  532         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         268     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.
C166 COMPILER V7.00, ADC1                                                                  04/01/2020 13:45:18 PAGE 10  



C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
